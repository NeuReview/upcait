import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { useAuthStore } from '../store/authStore';

export interface UserProfile {
  id: number;
  created_at: string;
  user_fullname: string | null;
  user_year_level: string | null;
  user_school: string | null;
  user_id: string | null;
  user_username: string | null;
}

interface UseUserProfileReturn {
  profile: UserProfile | null;
  loading: boolean;
  error: string | null;
  fetchProfile: (userId: string) => Promise<void>;
  updateProfile: (data: Partial<UserProfile>) => Promise<void>;
  createProfile: (data: Partial<UserProfile>) => Promise<void>;
}

export const useUserProfile = (): UseUserProfileReturn => {
  const { user } = useAuthStore();
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const fetchProfile = async (userId: string) => {
    if (!userId) return;
    
    try {
      setLoading(true);
      setError(null);
      
      console.log('Fetching profile for user:', userId);
      
      // First check if table exists and create it if it doesn't
      const { error: tableCheckError } = await supabase
        .from('user_profile')
        .select('count')
        .limit(1);
        
      if (tableCheckError && tableCheckError.code === '42P01') {
        console.log('user_profile table does not exist, creating it');
        const createTableSQL = `
          CREATE TABLE IF NOT EXISTS public.user_profile (
            id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
            user_id UUID REFERENCES auth.users(id),
            user_fullname TEXT,
            user_year_level TEXT,
            user_school TEXT,
            user_username TEXT UNIQUE,
            UNIQUE(user_id)
          );
        `;
        
        const { error: createError } = await supabase.rpc('create_user_profile_table', {
          sql: createTableSQL
        });
        
        if (createError) {
          console.error('Error creating user_profile table:', createError);
          throw createError;
        }
      }
      
      // Then check if profile exists
      const { data: existingProfiles, error: checkError } = await supabase
        .from('user_profile')
        .select('*')
        .eq('user_id', userId);
      
      if (checkError) {
        console.error('Error checking profile:', checkError);
        throw checkError;
      }

      // If no profile exists, create one
      if (!existingProfiles || existingProfiles.length === 0) {
        console.log('No profile found, creating new profile');
        const { data: newProfile, error: createError } = await supabase
          .from('user_profile')
          .insert([{
            user_id: userId,
            user_username: user?.email || '',
            user_fullname: null,
            user_year_level: null,
            user_school: null
          }])
          .select()
          .single();
        
        if (createError) {
          console.error('Error creating profile:', createError);
          throw createError;
        }
        
        console.log('Created new profile:', newProfile);
        setProfile(newProfile);
        return;
      }

      // If multiple profiles exist, use the most recent one
      if (existingProfiles.length > 1) {
        console.warn('Multiple profiles found for user, using most recent');
        const mostRecent = existingProfiles.sort((a, b) => 
          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
        )[0];
        setProfile(mostRecent);
        return;
      }

      // If exactly one profile exists, use it
      setProfile(existingProfiles[0]);
      console.log('Profile data received:', existingProfiles[0]);
      
    } catch (err: any) {
      console.error('Failed to fetch profile:', err);
      setError(err.message || 'Failed to fetch profile');
    } finally {
      setLoading(false);
    }
  };

  const updateProfile = async (data: Partial<UserProfile>) => {
    if (!user?.id) {
      setError('User not authenticated');
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      
      console.log('Updating profile for user:', user.id, 'with data:', data);
      
      const { data: updatedData, error: supabaseError } = await supabase
        .from('user_profile')
        .update({
          ...data,
        })
        .eq('user_id', user.id)
        .select()
        .single();
      
      if (supabaseError) {
        console.error('Error updating profile:', supabaseError);
        throw supabaseError;
      }
      
      console.log('Profile updated:', updatedData);
      setProfile(updatedData);
    } catch (err: any) {
      console.error('Failed to update profile:', err);
      setError(err.message || 'Failed to update profile');
    } finally {
      setLoading(false);
    }
  };

  const createProfile = async (data: Partial<UserProfile>) => {
    if (!user?.id) {
      setError('User not authenticated');
      return;
    }
    
    try {
      setLoading(true);
      setError(null);
      
      console.log('Creating profile for user:', user.id, 'with data:', data);
      
      const { data: newData, error: supabaseError } = await supabase
        .from('user_profile')
        .insert([
          {
            user_id: user.id,
            user_username: user.email,
            ...data,
          },
        ])
        .select()
        .single();
      
      if (supabaseError) {
        console.error('Error creating profile:', supabaseError);
        throw supabaseError;
      }
      
      console.log('Profile created:', newData);
      setProfile(newData);
    } catch (err: any) {
      console.error('Failed to create profile:', err);
      setError(err.message || 'Failed to create profile');
    } finally {
      setLoading(false);
    }
  };

  // Auto-fetch profile when user changes
  useEffect(() => {
    if (user?.id) {
      fetchProfile(user.id);
    } else {
      setProfile(null);
    }
  }, [user?.id]);

  return {
    profile,
    loading,
    error,
    fetchProfile,
    updateProfile,
    createProfile,
  };
}; 